// PRELOADER
$(window).on('load', function () {
    $('.preloader').addClass('hide');
    $('body').addClass('body-show');
    localStorage.clear();
});


//SLIDER
var swiperHTP = new Swiper('.htp-slider.swiper-container', {
    slidesPerView: 1,
    spaceBetween: 0,
    pagination: {
        el: '.htp-slider .swiper-pagination',
    },
});

// FUNCTION
function countDownTimer(){
    var countdownNumberEl = document.querySelector('.countdown-number');
    var countdown = 3;
    countdownNumberEl.textContent = countdown;

    var setIntervalCount = setInterval(function() {
        countdown = --countdown <= 0 ? 0 : countdown;
        countdownNumberEl.textContent = countdown;
    }, 1000);

    setTimeout(function() {
        clearInterval(setIntervalCount);
    }, 3000);
}
function waktuBatasGame(waktuAkhir){
    var countdownNumberEl = document.querySelector('#waktuBatas');
    var countdown = waktuAkhir;
    countdownNumberEl.textContent = countdown;
    var setIntervalCount = setInterval(function() {
        countdown = --countdown <= 0 ? 0 : countdown;
        countdownNumberEl.textContent = countdown;
    }, 1000);

    var waktuAkhirtoMs = waktuAkhir * 1000;
    setTimeout(function() {
        clearInterval(setIntervalCount);
    }, waktuAkhirtoMs);
}

var getUrlParameter = function getUrlParameter(sParam) {
    var sPageURL = window.location.search.substring(1),
        sURLVariables = sPageURL.split('&'),
        sParameterName,
        i;

    for (i = 0; i < sURLVariables.length; i++) {
        sParameterName = sURLVariables[i].split('=');

        if (sParameterName[0] === sParam) {
            return typeof sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
        }
    }
    return false;
};
var stage1 = getUrlParameter('stage1');
var stage2 = getUrlParameter('stage2');
var stage3 = getUrlParameter('stage3');
var stage4 = getUrlParameter('stage4');
var stage5 = getUrlParameter('stage5');
var stage6 = getUrlParameter('stage6');

function playNow(){
    var waktuBatasMain = localStorage.getItem("waktuMain");
    var waktuBatasMaintoMS = waktuBatasMain * 1000;

    $('#modalStageHowToPlay').addClass('hide');
    $('#modalCountDown').removeClass('hide');
    $('#modalGameWaktuSelesai').addClass('hide');
    $('.gameplay').addClass('show');

    countDownTimer();
    setTimeout(function() {
        $("#modalCountDown").addClass('hide');
        $('.backdrop').addClass('hide');

        waktuBatasGame(waktuBatasMain);
        setTimeout(function() {
            $('#modalGameWaktuSelesai').removeClass('hide');
            $('.backdrop').removeClass('hide');

            $('#modalGameWaktuSelesai .stage .stage__text h5').html('STAGE '+localStorage.getItem("stageId"));
            $('#modalGameWaktuSelesai .stage .stage__text h4').html(localStorage.getItem("stageName"));
        }, waktuBatasMaintoMS);
    }, 3000);
}
function exitGame(){
    localStorage.clear();
    $('.gameplay').removeClass('show');
    $('#modalGameWaktuSelesai').addClass('hide');
    $('.backdrop').addClass('hide');
}

function nextSlideHTP(id){
    if(id <= 2){
        swiperHTP.slideTo(id);
    }else{
        playNow();
    }
}

$('.home .drag .ground .stage').click(function () {
    var stageId = $(this).data("stage").id;
    var stageName = $(this).data("stage").name;
    var waktuMain = $(this).data("stage").waktuMain;

    if(getUrlParameter('stage'+stageId) == 'lock'){
        $('#modalStageLock').removeClass('hide');
        $('.backdrop').removeClass('hide');

        $('#modalStageLock .stage .stage__text h5').html('STAGE '+stageId);
        $('#modalStageLock .stage .stage__text h4').html(stageName);
        $('#modalStageLock .modal-title').html(stageName);
    }else{
        $('.gameplay').addClass('show');
        $('#modalStageHowToPlay .stage .stage__text h5').html('STAGE '+stageId);
        $('#modalStageHowToPlay .stage .stage__text h4').html(stageName);
        $('#modalStageHowToPlay').removeClass('hide');
        $('.backdrop').removeClass('hide');
        swiperHTP.slideTo(0);

        //setLocalStorage
        localStorage.setItem("stageId", stageId);
        localStorage.setItem("stageName", stageName);
        localStorage.setItem("waktuMain", waktuMain);
    }
});

//MODAL
$('.modalClose').click(function () {
    $('.modal').addClass('hide');
    $('.backdrop').addClass('hide');
});
var myBlock = document.getElementById('dragGround');

var mc = new Hammer(myBlock);
mc.add( new Hammer.Pan({ direction: Hammer.DIRECTION_ALL, threshold: 0 }) );
mc.on("pan", handleDrag);

// poor choice here, but to keep it simple
// setting up a few vars to keep track of things.
// at issue is these values need to be encapsulated
// in some scope other than global.
var maxYTop = 0;
var maxYBottom = -922;
var maxXLeft = 0;
var maxXRight = -1390;
var lastPosX = 0;
var lastPosY = 0;
var isDragging = false;
function handleDrag(ev) {

    // for convience, let's get a reference to our object
    var elem = myBlock;

    // console.log(ev)
    // console.log(elem)
    
    // DRAG STARTED
    // here, let's snag the current position
    // and keep track of the fact that we're dragging
    if ( ! isDragging ) {
        isDragging = true;
        lastPosX = elem.offsetLeft;
        lastPosY = elem.offsetTop;
    }

    // move Y position
    var posY = 0;
    var keepYTop = (ev.deltaY + lastPosY) > maxYTop;
    var keepYBottom = (ev.deltaY + lastPosY) < maxYBottom;
    if(keepYTop){
        posY = maxYTop;
    // }else if(keepYBottom){
    //     posY = maxYBottom;
    }else{
        posY = ev.deltaY + lastPosY;
    }
    elem.style.top = posY + "px";

    // move X position
    var posX = 0;
    var keepXLeft = (ev.deltaX + lastPosX) > maxXLeft;
    var keepXRight = (ev.deltaX + lastPosX) < maxXRight;
    if(keepXLeft){
        posX = maxXLeft;
    // }else if(keepXRight){
    //     posX = maxXRight;
    }else{
        posX = ev.deltaX + lastPosX;
    }
    elem.style.left = posX + "px";
    
    // DRAG ENDED
    // this is where we simply forget we are dragging
    if (ev.isFinal) {
        isDragging = false;
    }
}
// FUNCTION
var dragStage1 = document.getElementById('dragStage1');
var dragStage1MC = new Hammer(dragStage1);
dragStage1MC.add( new Hammer.Pan({ direction: Hammer.DIRECTION_ALL, threshold: 0 }) );
dragStage1MC.on("pan", handleDrag);

// var global
var maxYTop = 0;
var maxYBottom = -922;
var maxXLeft = 0;
var maxXRight = -1390;
var lastPosX = 0;
var lastPosY = 0;
var isDragging = false;
function handleDrag(ev) {
    var elem = dragStage1;
    
    // DRAG STARTED
    if ( ! isDragging ) {
        isDragging = true;
        lastPosX = elem.offsetLeft;
        lastPosY = elem.offsetTop;
    }

    // move Y position
    var posY = 0;
    var keepYTop = (ev.deltaY + lastPosY) > maxYTop;
    var keepYBottom = (ev.deltaY + lastPosY) < maxYBottom;
    if(keepYTop){
        posY = maxYTop;
    // }else if(keepYBottom){
    //     posY = maxYBottom;
    }else{
        posY = ev.deltaY + lastPosY;
    }
    elem.style.top = posY + "px";

    // move X position
    var posX = 0;
    var keepXLeft = (ev.deltaX + lastPosX) > maxXLeft;
    var keepXRight = (ev.deltaX + lastPosX) < maxXRight;
    if(keepXLeft){
        posX = maxXLeft;
    // }else if(keepXRight){
    //     posX = maxXRight;
    }else{
        posX = ev.deltaX + lastPosX;
    }
    elem.style.left = posX + "px";
    
    // DRAG ENDED
    if (ev.isFinal) {
        isDragging = false;
    }
}

// DRAG SAMPAH
let sourceContainerId = "";

// Allow multiple draggable items
let dragSources = document.querySelectorAll('[draggable="true"]');
dragSources.forEach(dragSource => {
    dragSource.addEventListener("dragstart", dragStart);
    dragSource.addEventListener("dragend", dragEnd);
});

function dragStart(e) {
    this.classList.add("dragging");
    e.dataTransfer.setData("text/plain", e.target.id);
    sourceContainerId = this.parentElement.id;
}

function dragEnd(e) {
    this.classList.remove("dragging");
}

// Allow multiple dropped targets
let dropTargets = document.querySelectorAll(
    '[data-role="drag-drop-container"]'
);
dropTargets.forEach(dropTarget => {
    dropTarget.addEventListener("drop", dropped);
    dropTarget.addEventListener("dragenter", cancelDefault);
    dropTarget.addEventListener("dragover", dragOver);
    dropTarget.addEventListener("dragleave", dragLeave);
});

function dropped(e) {
    // execute function only when target container is different from source container
    if (this.id !== sourceContainerId) {
        cancelDefault(e);
        let id = e.dataTransfer.getData("text/plain");
        e.target.appendChild(document.querySelector("#" + id));
        this.classList.remove("hover");
    }
}

function dragOver(e) {
    cancelDefault(e);
    this.classList.add("hover");
}

function dragLeave(e) {
    this.classList.remove("hover");
}

function cancelDefault(e) {
    e.preventDefault();
    e.stopPropagation();
    return false;
}
